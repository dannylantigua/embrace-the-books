################################################################################
# Properties specific to the support of ACSI
################################################################################
## ACSI properties - engages correct implementations for various application ACSI extensions
security.profile_classname=com.agencyport.security.profile.builtin.PortalSecurityProfile
security.profile_manager_classname=com.agencyport.security.profile.builtin.BuiltinSecurityProfileManager
security.credentials_agent_classname=com.agencyport.security.credentials.BuiltinCredentialsAgent

############################################################
# ACSI
# Factory list for implementations of com.agencyport.security.resource.ISecureResourceFactory interface.
# Each factory implementation is a factory for a com.agencyport.security.resource.ISecureResource instance 
# which is sensitive to the current security profile.
# Examples of secure resources are menus and front servlet (front controller).
# These are used by security filter. The menu resource is also used 
# to support the menu UI.
############################################################
secure_resource_factories=com.agencyport.secure.menu.provider.SecureMenuFactory;\
com.agencyport.secure.front.SecureFrontControllerFactory;\
com.agencyport.servlets.domXML.secure.SecureDebugProviderResourceFactory

############################################################
# ACSI  
# Role to policy type mapping for securing front controller resource (FrontServlet)
# see com.agencyport.secure.front.SecureFrontController. For systems
# which put an intrinsic value on the role name itself and do not embrace
# permission based authorization. This is here only as a 
# reference point. The LOB demo application embraces permissions
# rather than just role names for authorization.
############################################################
#Roles.COMMERCIAL_POLICY_TYPE=agent;agentcl;underwriter;underwritercl;admin
#Roles.PERSONAL_POLICY_TYPE=agent;agentpl;underwriter;underwriterpl;admin;turneragentrole
#Roles.FARMRANCH_POLICY_TYPE=agent;agentfr;underwriter;underwriterfr;admin

############################################################
# ACSI - CSRF protection configuration
# CSRF supports a list of URIs and methods (POST, GET) which
# the framework will protect against potential CSRF attacks.
# The configuration is formatted as a list of URIs delimited by semi-colons with
# the specific methods within parenthesis following each URI
# each method delimited with a comma.   
############################################################
security.csrf_uri_include_list=FrontServlet(POST,GET);\
WorkItemAction(POST,GET)
# Setting the following flag to false will deactivate CSRF protection. This should only be turned off during 
# performance testing and no other circumstance.
security.csrf_protection=true
############################################################
# ACSI - Work Item and Account Action Verification Configuration
# the framework will verify that user has the authority to execute the action on work items and accounts. 
############################################################
# Setting the following flag to false will deactivate work item action verification.
security.verify_work_item_actions=true
# The following map relates incoming work item action values to their permission name counterparts. This is used to verify that user has the authority to execute 
# the incoming action on the work item.
security.action_to_permission_map=MoveWorkItems,accessCanMove;\
MergeAccount,accessCanMerge;\
Delete,accessCanDelete;\
DoAssign,accessCanAssign;\
Copy,accessCanCopy;\
View,accessCanViewAccount;\
Open,accessCanOpen;\
Claim,accessCanClaim;\
Approve,accessCanApprove;\
Endorse,accessCanEndorse;\
Link,accessCanLink

############################################################
# ACSI - URL Verification Configuration
# the framework will verify URLs redirected to. 
############################################################
# Setting the following flag to false will deactivate url verification.
security.verify_urls=true
# The following list provides a white list of valid starting sequences for URLs
security.valid_url_start_sequences=${my_portal_app};\
${APPLICATION_NAME};\
/${APPLICATION_NAME};\
DisplayHomePage

security.valid_forward_resource_extensions=jsp
security.invalid_forward_url_tokens=WEB-INF;META-INF;..;\\;*;:;
############################################################
# ACSI - Underlying details configuration
# The following flag should be turned to false for all production
# implementations. On any AP security exception, if this flag
# is true then a generic secure message text will be delivered
# to the sender.  
############################################################
security.reveal_exception_details=true

############################################################
# ACSI - HTTP response headers
# The following list contains a set of entries delimited 
#by a semi-colon where each entry is a response header name 
#and value delimited by a comma. These are a set of
# HTTP response headers that improve the security ratings.
# If you need to turn it off use the boolean flag.
############################################################
security.add_secure_response_headers=true
security.secure_response_headers=X-Content-Type-Options,nosniff;X-Frame-Options,SAMEORIGIN